C51 COMPILER V9.59.0.0   SYSTEMSLEEP                                                       12/20/2020 19:27:48 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE SYSTEMSLEEP
OBJECT MODULE PLACED IN .\Objects\SystemSleep.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE code\SystemSleep.c OPTIMIZE(8,SPEED) BROWSE INCDIR(.\include) DEBUG OBJE
                    -CTEXTEND PRINT(.\Listings\SystemSleep.lst) TABS(2) OBJECT(.\Objects\SystemSleep.obj)

line level    source

   1          
   2          #include "all.h"
   3          
   4          
   5          bit WakeupFlag;
   6          bit FindIrFlag;
   7          bit LowPowerFalshFlag;
   8          unsigned char LowPowerFlashTimer;
   9          unsigned char LowerFlashCounter;
  10          
  11          unsigned int  MotorWorkTimer;
  12          unsigned int  MotorWokrKeepTimer;
  13          unsigned int  MotorRunLeftTimer;
  14          
  15          void SleepProcess(void)
  16          {
  17   1        CloseBackLight();
  18   1        //printf("I will go to sleep!\n");
  19   1        ReadyToSleep();
  20   1        GotoSleep();
  21   1        DelayUs(100);
  22   1        if (WakeupFlag)
  23   1        {
  24   2          Uart0_Init();
  25   2          //Enableprintf();
  26   2          //printf("I wake up from sleeep!\n");
  27   2        }
  28   1        WakeUpProcess();
  29   1        ConfirmWorkStatus();
  30   1      
  31   1      
  32   1      
  33   1      }
  34          
  35          
  36          void  ReadyToSleep(void)
  37          {
  38   1          PWMCON &= ~(0x80);//关闭PWM模组电源
  39   1          ADCCON &= ~(0x80);//关闭ADC模组电源
  40   1          TurnOffWatchDog();
  41   1          TR0 = 0; 
  42   1          WakeupFlag = 0;
  43   1          InitialIOPortForSleep();
  44   1          //DelayUs(3);         //测试等待ADC灯设备关掉
  45   1          BtmInitial();
  46   1      
  47   1      }
  48          void  GotoSleep(void)
  49          {
  50   1          /* half唤醒验证 */
  51   1          PCON = 0x02;  //half唤醒验证
  52   1          _nop_();
  53   1          _nop_();
  54   1          _nop_();
C51 COMPILER V9.59.0.0   SYSTEMSLEEP                                                       12/20/2020 19:27:48 PAGE 2   

  55   1          _nop_();
  56   1          _nop_();
  57   1          _nop_();
  58   1          _nop_();
  59   1          _nop_();
  60   1          _nop_();
  61   1          _nop_();
  62   1          _nop_();
  63   1          _nop_();
  64   1          _nop_();
  65   1          _nop_();
  66   1          BTMCON = 0x00;                    //关闭低频时钟
  67   1      
  68   1      }
  69          void  WakeUpProcess(void)
  70          {
  71   1          unsigned int  IrRecVoltage1,IrRecVoltage2,IrRecVoltage;
  72   1          bit HandIsCloseFlag = 0;
  73   1          //WorkStatusValue = CheckIRStatus;
  74   1          FindIrFlag = 0;           //发现有没有红外反馈标志
  75   1          P0CON = 0XFF;
  76   1          IrRecVoltage1 = AdcResult(IrAdcChannel);
  77   1      //    printf("Before IR LED WORK Voltage NO1 = %d \n", IrRecVoltage1);
  78   1      //    DelayUs(80);
  79   1      //    IrRecVoltage1 = AdcResult(IrAdcChannel);
  80   1      //    //printf("Before IR LED WORK Voltage NO2= %d \n", IrRecVoltage1);
  81   1        
  82   1      
  83   1      //    Lm393PowerPin = 0;          //比较器上电
  84   1      //    DelayUs(10);
  85   1      //    if (IrCheckPin == 0)
  86   1      //      {
  87   1      //        //printf("ATTEMTON,Find IR PIN is LOW !\n");
  88   1      //        Lm393PowerPin  = 1;
  89   1      //      }
  90   1          if(IrRecVoltage1 < IrOverValue)
  91   1          {
  92   2      //          printf("ATTEMTON,Find IR Over,can't work!\n");
  93   2          
  94   2          }
  95   1          else
  96   1          { 
  97   2                
  98   2            IrWorkPin  = 0;
  99   2            DelayUs(10);
 100   2            //DelayUs(4);
 101   2            IrRecVoltage2 = AdcResult(IrAdcChannel);
 102   2            IrWorkPin  = 1;
 103   2      //      printf("After IR LED WORK Voltage = %d \n", IrRecVoltage2);
 104   2            if (IrRecVoltage1 > IrRecVoltage2 )
 105   2            {
 106   3              IrRecVoltage = IrRecVoltage1 - IrRecVoltage2;
 107   3      //        printf("IrRecValtage = %d \n", IrRecVoltage);
 108   3              if (IrRecVoltage1 > IrArroudValueNo1)
 109   3              {
 110   4                if (IrRecVoltage > HandIsCloseNo1)
 111   4                  {
 112   5                    HandIsCloseFlag = 1;
 113   5                    //printf("\n  IR NO1!");
 114   5                  }
 115   4              }
 116   3              if (IrRecVoltage1 > IrArroudValueNo2)
C51 COMPILER V9.59.0.0   SYSTEMSLEEP                                                       12/20/2020 19:27:48 PAGE 3   

 117   3              {
 118   4                if (IrRecVoltage > HandIsCloseNo2)
 119   4                  {
 120   5                    HandIsCloseFlag = 1;
 121   5                    //printf("\n IR NO2!");
 122   5                  }
 123   4              }
 124   3              if (IrRecVoltage1 > IrArroudValueNo3)
 125   3              {
 126   4                if (IrRecVoltage > HandIsCloseNo3)
 127   4                  {
 128   5                    HandIsCloseFlag = 1;
 129   5                    //printf("\n IR NO3!");
 130   5                  }
 131   4              }
 132   3              if (IrRecVoltage1 > IrArroudValueNo4)
 133   3              {
 134   4                if (IrRecVoltage > HandIsCloseNo4)
 135   4                  {
 136   5                    HandIsCloseFlag = 1;
 137   5                    //printf("\n IR NO4!");
 138   5                  }
 139   4              }
 140   3              //if (IrCheckPin == 0)
 141   3              //if ((IrCheckPin == 0) && HandIsCloseFlag)
 142   3              if(HandIsCloseFlag)
 143   3              {
 144   4                //DelayUs(2);
 145   4                //DelayUs(1);
 146   4                IrWorkPin = 1;
 147   4                //Lm393PowerPin = 1;
 148   4                FindIrFlag = 1;
 149   4                ////printf("\n Find IR imformation !\n");
 150   4                
 151   4        //        if (IrCheckPin == 0)
 152   4        //        {
 153   4        //          IrWorkPin = 1;
 154   4        //          Lm393PowerPin = 1;
 155   4        //          FindIrFlag = 1;
 156   4        //          //printf("Find IR imformation !\n");
 157   4        //        }
 158   4              }
 159   3              else
 160   3              {
 161   4                CloseBackLight();
 162   4                IrWorkPin = 1;
 163   4                //Lm393PowerPin = 1;
 164   4                ////printf("\n Can't find IR !\n");
 165   4              }
 166   3            }
 167   2            else
 168   2            {
 169   3                CloseBackLight();
 170   3                IrWorkPin = 1;
 171   3                //Lm393PowerPin = 1;
 172   3                ////printf("Find error of check IR!\n");
 173   3      
 174   3            }
 175   2          } 
 176   1            
 177   1      }
 178          
C51 COMPILER V9.59.0.0   SYSTEMSLEEP                                                       12/20/2020 19:27:48 PAGE 4   

 179          //设定马达右转
 180          //初始化马达右转的定时初始化
 181          void OpenMotorRunRight(void)
 182          {
 183   1        MotorControlInA = 1; 
 184   1        MotorControlInB = 0;
 185   1        
 186   1        MotorWorkTimer = 0;
 187   1        MotorWokrKeepTimer = 0;
 188   1        
 189   1        MotorNeedWorkFlag = 1;
 190   1        MotorRunLeftFlag = 0;
 191   1      }
 192          
 193          //设定马达左转
 194          //初始化马达左转的定时初始化
 195          void OpenMotorRunLeft(void)
 196          {
 197   1        MotorControlInA = 0; 
 198   1        MotorControlInB = 1;
 199   1        //MotorWorkTimer = 0;
 200   1        //MotorWokrKeepTimer = 0;
 201   1        MotorRunLeftTimer = 0;
 202   1        MotorNeedWorkFlag = 0;
 203   1        MotorRunLeftFlag = 1;
 204   1        MotorPauseFlag = 0;
 205   1        MotorPauseValue = 0;
 206   1      }
 207          
 208          void CloseMotor(void)
 209          {
 210   1        MotorPauseFlag = 0;
 211   1        MotorPauseValue = 0;
 212   1        MotorControlInA = 0; 
 213   1        MotorControlInB = 0;
 214   1      
 215   1      
 216   1      }
 217          
 218          void OpenBackLight(void)
 219          {
 220   1        
 221   1        MotorWorkLed = 1;
 222   1        
 223   1        
 224   1      
 225   1      }
 226          
 227          
 228          void CloseBackLight(void)
 229          {
 230   1        
 231   1        MotorWorkLed = 0;
 232   1      
 233   1      
 234   1      }
 235          
 236          
 237          /*****************************************************
 238          
 239          *函数名称：void BtmInitial(void)
 240          *函数功能：BTM初始化
C51 COMPILER V9.59.0.0   SYSTEMSLEEP                                                       12/20/2020 19:27:48 PAGE 5   

 241          *入口参数：void
 242          *出口参数：void
 243          *****************************************************/
 244          void BtmInitial(void)
 245          {
 246   1      //  BTMCON = 0x00;  //不开启
 247   1      //  BTMCON = 0x80;  //每15.6ms产生一个中断
 248   1      //  BTMCON = 0x81;  //每31.3ms产生一个中断
 249   1      //  BTMCON = 0x82;  //每62.5ms产生一个中断
 250   1      //    BTMCON = 0x83;  //每125ms产生一个中断
 251   1          BTMCON = 0x84;  //每0.25s产生一个中断
 252   1      //  BTMCON = 0x85;  //每0.5s产生一个中断
 253   1      //  BTMCON = 0x86;  //每1s产生一个中断
 254   1      //  BTMCON = 0x87;  //每2s产生一个中断
 255   1        //Pwm0Stop();
 256   1        //MotorWorkLed = 1;
 257   1        //CloseInt00();
 258   1        
 259   1        IE1 |= 0x04;       //开启BTM中断
 260   1        EA = 1;           //开启总中断
 261   1      }
 262          
 263          
 264          
 265          /*****************************************************
 266          *函数名称：void BTM_Int(void) interrupt 9
 267          *函数功能：中断服务函数
 268          *入口参数：void
 269          *出口参数：void
 270          *****************************************************/
 271          void BTM_Int(void) interrupt 9
 272          {
 273   1        if(!(BTMCON&0X40))    //中断标志位判断
 274   1        {
 275   2          WakeupFlag = 1;
 276   2          //P04 = ~P04;
 277   2        }
 278   1      }
 279          
 280          
 281          
 282          
 283          void DelayUs(unsigned char delayTimer)
 284          {
 285   1      
 286   1          unsigned char  n;
 287   1      
 288   1          while(delayTimer>0)
 289   1        {
 290   2          for(n=0;n<30;++n)
 291   2          {
 292   3            _nop_();
 293   3          }
 294   2          delayTimer--;
 295   2        }
 296   1      
 297   1      }
 298          
 299          
 300          
 301          
 302          void MotorWorkProcess()
C51 COMPILER V9.59.0.0   SYSTEMSLEEP                                                       12/20/2020 19:27:48 PAGE 6   

 303          {
 304   1        FeedToWatchDog();
 305   1        if (MotorTimerOverFlag)
 306   1        {
 307   2          
 308   2          CloseBackLight();
 309   2          WorkStatusValue  = SleepStatus;
 310   2          MotorTimerOverFlag = 0;
 311   2          //Uart0_Init();
 312   2          //Enableprintf();
 313   2          //printf("I from motor work status change sleep status!\n");
 314   2          TR0 = 0;
 315   2          ET0 = 0;
 316   2        }
 317   1      
 318   1      
 319   1      }
 320          
 321          
 322          
 323          void ReadyToMotorWork(void)
 324          {
 325   1        //BTMCON = 0x00; 
 326   1        IrWorkPin = 1;
 327   1        OpenMotorRunRight();
 328   1        OpenBackLight();
 329   1        WorkStatusValue  = MotorWorkStatus;
 330   1        MotorTimerOverFlag = 0;
 331   1        MotorWorkTimer = 0;
 332   1        InitailTimer();
 333   1      
 334   1      }
 335          
 336          
 337          
 338          void ConfirmWorkStatus(void)
 339          {
 340   1        unsigned int BatteryVoltage = 1000;
 341   1        unsigned int batteryValtageAD1,batteryValtageAD2;
 342   1        //unsigned char i;
 343   1        if (FindIrFlag)
 344   1        {
 345   2          //TurnOnWatchDog();
 346   2          BTMCON = 0x00;                    //关闭低频时钟
 347   2          TurnOnWatchDog();
 348   2          ////printf("ready to check Battery voltage!\n");
 349   2          //ReadyToMotorWork
 350   2          batteryValtageAD1 = AdcResult(BatteryAdcChannel);
 351   2          
 352   2      //      for( i = 0; i < 10; i++)
 353   2      //      {
 354   2      //          
 355   2      //          //printf("BatteryValtage %bd  = %d \n", i,AdcResultValue[i]);
 356   2      //      
 357   2      //      
 358   2      //      } 
 359   2          //printf("\n BatteryValtage NO1 = %d \n", BatteryVoltage);
 360   2          
 361   2          //DelayUs(180);
 362   2          //DelayUs(30);
 363   2          batteryValtageAD2 = AdcResult(BatteryAdcChannel);
 364   2          
C51 COMPILER V9.59.0.0   SYSTEMSLEEP                                                       12/20/2020 19:27:48 PAGE 7   

 365   2          //BatteryVoltage = 1000;
 366   2          
 367   2      //      for( i = 0; i < 10; i++)
 368   2      //      {
 369   2      //          
 370   2      //          //printf("BatteryValtage %bd  = %d \n", i,AdcResultValue[i]);
 371   2      //      
 372   2      //      
 373   2      //      }
 374   2          BatteryVoltage = batteryValtageAD1;
 375   2          
 376   2      //    printf("BatteryValtage NO1 = %d \n", batteryValtageAD1);
 377   2      //    printf("BatteryValtage NO2 = %d \n", batteryValtageAD2);
 378   2      //    printf("BatteryValtage  = %d \n", BatteryVoltage);
 379   2          if (BatteryVoltage < LowPowerValue)
 380   2          {
 381   3      //      printf("It is low power!\n");
 382   3            ReadyToLowpower();
 383   3          }
 384   2          else
 385   2          {
 386   3      //      printf("power is ok and motor will work!\n");
 387   3            ReadyToMotorWork();
 388   3          }
 389   2          
 390   2        }
 391   1      }
 392          
 393          
 394          
 395          void ReadyToLowpower(void)
 396          {
 397   1        WorkStatusValue  = LowPowerStatus;
 398   1        LowPowerFalshFlag = 1;
 399   1        LowPowerFlashTimer = 0;
 400   1        LowerFlashCounter = 0;
 401   1        OpenBackLight();
 402   1        InitailTimer();
 403   1      }
 404          
 405          
 406          
 407          void lowerPowerProcess(void)
 408          {
 409   1        FeedToWatchDog();
 410   1        if (!LowPowerFalshFlag)
 411   1        {
 412   2          
 413   2          CloseBackLight();
 414   2          WorkStatusValue  = SleepStatus;
 415   2          //MotorTimerOverFlag = 0;
 416   2          Uart0_Init();
 417   2          EnablePrintf();
 418   2          //printf("I from lowpower status change sleep status!\n");
 419   2          TR0 = 0;
 420   2          ET0 = 0;
 421   2        }
 422   1      }
 423          
 424          
 425          void TurnOffWatchDog(void)
 426          {
C51 COMPILER V9.59.0.0   SYSTEMSLEEP                                                       12/20/2020 19:27:48 PAGE 8   

 427   1        bit TmpBit;
 428   1        TmpBit = EA;
 429   1        EA = 0;
 430   1        OPINX = 0xC1;
 431   1        OPREG &= ~(0x80); //关闭看门狗
 432   1        EA = TmpBit;
 433   1      }
 434          
 435          void TurnOnWatchDog(void)
 436          {
 437   1        bit TmpBit;
 438   1        TmpBit = EA;
 439   1        EA = 0;
 440   1        OPINX = 0xC1;
 441   1        OPREG |= 0x80; //打开看门狗,默认500MS的复位时间
 442   1        EA = TmpBit;
 443   1      
 444   1      }
 445          
 446          
 447          void FeedToWatchDog(void)
 448          {
 449   1        WDTCON |= 0x10;   
 450   1      
 451   1      }
 452          
 453          
 454          
 455          void InitialIOPortForSleep(void)
 456          {
 457   1      //    P0 = 0X00;
 458   1      //    MotorWorkLed = 1;
 459   1      //    IrWorkPin = 1;
 460   1      //    P1 = 0X00;
 461   1      //    P2 =0X00;
 462   1      //      P0CON &= 0XFE;
 463   1            //P0PH &= 0XFE;
 464   1      //      P0PH = 0X01;
 465   1      
 466   1      
 467   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    499    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      8       6
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      3       3
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
